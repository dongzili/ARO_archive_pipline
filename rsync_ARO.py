#! /scinet/niagara/intel/2018.2/intelpython3/bin/python
import numpy as np
from func_check import *
from func_sync import *
import argparse

def main():
    helpStr='''
    Sync files between groundhog and niagara,
    will auto group files into a number of 1000 for htar
    '''
    parser = argparse.ArgumentParser(description=helpStr,formatter_class=argparse.RawTextHelpFormatter)
    parser.add_argument("infoFile",metavar="$DISK_file_info.dat",nargs=1,\
                        help="file containing folder name, file numbers, generated by check_file_info.py in groundhog")
    parser.add_argument("-o",dest="destDir",type=str,\
                        help="path to the directory you want to sync data to")
    parser.add_argument("-s",dest="startDir",type=int,default=0,\
                        help="the folder to start sync,default 0")
    parser.add_argument("-e",dest="endDir",type=int,default=-1,\
                        help="the folder to stop sync,default -1")
    parser.add_argument("-d",dest="numDrives",type=int,default=10,\
                        help="number of drives to sync")
    parser.add_argument("--check",dest="checkSync",action="store_true",\
                        help="check if the number of synced file equals original")
    parser.add_argument("--syncNotes",dest="syncNotes",action="store_true",\
                        help="sync notes")
    parser.add_argument("--syncData",dest="syncData",action="store_true",\
                        help="sync data (will auto do check)")
    parser.add_argument("--mkdir",dest="mkdir",action="store_true",\
                        help="create new directories in destination folder")
    args = parser.parse_args()

    driveName=args.infoFile[0][0]
    diskInfoFile=args.infoFile[0]
    destDir=args.destDir
    print('drive to sync:{}\nsync to:{} \ninfo file:{}\n'\
        .format(driveName,destDir,diskInfoFile))
    src='groundhog:'
    drives = ['/mnt/{}-{}/'.format(driveName,no) for no in range(0,args.numDrives)]
    #check subdirs:
    subdirs,leni,lenj,numFiles,sizeFiles=read_dsk_info(diskInfoFile)
    if args.endDir==-1:
        endDir=len(subdirs)-1
    else:
        endDir=args.endDir
    startDir=args.startDir; numDir=endDir-startDir+1
    print(numDir)

    if args.mkdir==True:
        null=create_files(destDir,subdirs,leni,lenj,startDir=startDir,numDir=numDir)
    if args.syncNotes==True:
        null=rsync_notes(destDir,src,subdirs,drives,startDir,numDir)
    if args.syncData==True:
        null=rsync_data(destDir,src,subdirs,drives,leni,lenj,startDir,numDir)
        check=check_rsync(destDir,subdirs,leni,lenj,numFiles,startDir,numDir)
        while(check!=0):
            null=rsync_data(destDir,src,subdirs,drives,leni,lenj,startDir,numDir)
            checknew=check_rsync(destDir,subdirs,leni,lenj,numFiles,startDir,numDir)
            if(checknew==check):
                print('corrupted files:',check)
                break

    if args.checkSync==True:
            check=check_rsync(destDir,subdirs,leni,lenj,numFiles,startDir,numDir)
        

if __name__ == "__main__":
    main()
